@page "/"
@attribute [TabItemOption(Text = "Index")]
@using System.Diagnostics.CodeAnalysis

<PageTitle>页面编辑</PageTitle>
<h2>页面内容不刷新, 光标乱跳错误</h2>

<h3>测试步骤,1.点首页之外页面,再切回来首页才会出现数据</h3>
<h3>2.选中某段文字,再乱点工具栏 B,H 任何按钮,光标大几率跳到文档末尾或者另一个MD组件</h3>

<div class="row">
    <div class="col-6 col-sm-6">
        <Select TValue="string" Color="Color.Primary" Items="GroupItems()" OnSelectedItemChanged="OnItemChanged">
        </Select>
    </div>
    <div class="col-2 col-sm-2">
        <Button Text="保存" OnClickWithoutRender="Save" Color="Color.Primary" />
    </div>
</div>


@*@if (TpvPage != null) //注释掉这句就会重现bug
    {*@
<div class="row">
    <h5 class="m-3">页面说明</h5>
    <div style="width: 100%; height: 500px;">

        <Markdown Height="500" MinHeight="300" PreviewStyle="PreviewStyle.Tab" Language="@Language" @bind-Value="@TpvPage.Markdown" @bind-Html="@TpvPage.Html" />
         
    </div>


</div>
<div class="row">
    <h5 class="m-3">页面说明</h5>
    <div style="width: 100%; height: 500px;"> 

        <Markdown Height="500" MinHeight="300" PreviewStyle="PreviewStyle.Tab" Language="@Language" @bind-Value="@TpvPage.Markdown2" @bind-Html="@TpvPage.Html2" />
    </div>


</div>
@* }  *@

@code {

    /// <summary>
    /// 获取并设置Markdown语言
    /// </summary>
    private string? Language { get; set; }

    [Inject]
    [NotNull]
    private ToastService? ToastService { get; set; }


    /// <summary>
    /// 注入fsql服务
    /// </summary>
    [Inject]
    [NotNull]
    IFreeSql? fsql { get; set; }

    [NotNull]
    List<WebPages>? Items { get; set; } = new List<WebPages>();

    [NotNull]
    WebPages? TpvPage { get; set; } = new WebPages();

    protected override void OnInitialized()
    {
        Language = CultureInfo.CurrentUICulture.Name;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            //读取页面数据,显示第一页到编辑器
            Items = fsql.Select<WebPages>().OrderBy(a => a.Code).ToList();
            TpvPage = Items?.First();
            StateHasChanged();
        }
    }

    Task Save()
    {
        var res = fsql.Update<WebPages>().SetSource(TpvPage).ExecuteAffrows();
        if (res > 0)
        {
            ToastService.Success("保存成功");
        }
        return Task.CompletedTask;
    }

    /// <summary>
    /// Select 组件数据源
    /// </summary>
    /// <returns></returns>
    private IEnumerable<SelectedItem> GroupItems()
    {
        if (Items == null)
        {
            return new List<SelectedItem>();
        }
        var list = new List<SelectedItem>();
        foreach (var item in Items)
        {
            list.Add(new SelectedItem() { Value = item.Code ?? "", Text = item.PageName ?? "", GroupName = item.ParentCode ?? "" });
        }
        return list;
    }

    /// <summary>
    /// 下拉选项改变时调用此方法
    /// </summary>
    /// <param name="item"></param>
    private Task OnItemChanged(SelectedItem item)
    {
        TpvPage = Items.Where(a => a.Code == item.Value).First();
        System.Console.WriteLine($"SelectedItem Text: {item.Text} Value: {item.Value} Selected");
        StateHasChanged();
        return Task.CompletedTask;
    }
}
